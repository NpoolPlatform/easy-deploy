- name: Detect spacemesh version
  shell: 'go-spacemesh version | grep {{ go_spacemesh_version }}'
  register: go_spacemesh_version_detect
  ignore_errors: true

- name: Stop spacemesh service
  become: yes
  become_user: root
  become_method: sudo
  ansible.builtin.systemd:
    name: spacemesh
    state: stopped
  ignore_errors: yes

- name: Create spacemesh user
  become: yes
  become_user: root
  become_method: sudo
  user:
    name: spacemesh
    state: present

- name: Create chain directory
  become: yes
  become_user: root
  become_method: sudo
  ansible.builtin.file:
    path: '{{ chain_mountpoint }}/spacemesh'
    state: directory
    recurse: yes
    owner: spacemesh
    group: spacemesh

- name: Remove go-spacemesh source dir
  become: yes
  become_user: root
  become_method: sudo
  ansible.builtin.file:
    path: '{{ spacemesh_source_dir }}'
    state: absent
  when: go_spacemesh_version_detect.failed

- name: Remove post-rs source dir
  become: yes
  become_user: root
  become_method: sudo
  ansible.builtin.file:
    path: '{{ spacemesh_post_source_dir }}'
    state: absent
  when: go_spacemesh_version_detect.failed

- name: Clone post-rs dir
  become: yes
  become_user: root
  become_method: sudo
  ansible.builtin.git:
    repo: 'https://github.com/spacemeshos/post-rs.git'
    dest: '{{ spacemesh_post_source_dir }}'
  when: go_spacemesh_version_detect.failed

- name: Clone go-spacemesh dir
  become: yes
  become_user: root
  become_method: sudo
  ansible.builtin.git:
    repo: 'https://github.com/spacemeshos/go-spacemesh.git'
    dest: '{{ spacemesh_source_dir }}'
    version: '{{ go_spacemesh_version }}'
  when: go_spacemesh_version_detect.failed

- name: Install ubuntu dependencies
  become: yes
  become_user: root
  become_method: sudo
  ansible.builtin.apt:
    name: '{{ item }}'
    state: present
  with_items:
    - gcc
    - libssl-dev
    - make
    - curl
    - unzip
    - git-lfs
    - ocl-icd-opencl-dev
    - libudev-dev
    - logrotate
    - cron
    - zip
  when:
    - ansible_pkg_mgr == 'apt'
    - go_spacemesh_version_detect.failed

- name: Build post
  become: yes
  become_user: root
  become_method: sudo
  environment:
    PATH: "{{ rust_bin_dir }}:{{ lookup('env', 'PATH') }}"
  shell: "cd {{ spacemesh_post_source_dir }};echo 1.75.0 >rust-toolchain;cargo build -p post-cbindings --profile release-clib"
  when: go_spacemesh_version_detect.failed

- name: Build service
  become: yes
  become_user: root
  become_method: sudo
  environment:
    PATH: "{{ rust_bin_dir }}:{{ lookup('env', 'PATH') }}"
  shell: "cd {{ spacemesh_post_source_dir }};echo 1.75.0 >rust-toolchain;git submodule update --init --recursive;cargo build --release -p service"
  when: go_spacemesh_version_detect.failed

- name: Create build dir
  become: yes
  become_user: root
  become_method: sudo
  ansible.builtin.file:
    path: '{{ spacemesh_source_dir }}/build'
    state: directory
    recurse: yes
  when: go_spacemesh_version_detect.failed

- name: cp service to target
  become: yes
  become_user: root
  become_method: sudo
  copy:
    src: '{{ spacemesh_post_source_dir }}/target/release/service'
    dest: '{{ spacemesh_source_dir }}/build'
    remote_src: yes
  when: go_spacemesh_version_detect.failed

- name: cp libpost.so to target
  become: yes
  become_user: root
  become_method: sudo
  copy:
    src: '{{ spacemesh_post_source_dir }}/target/release-clib/libpost.so'
    dest: '{{ spacemesh_source_dir }}/build'
    remote_src: yes
  when: go_spacemesh_version_detect.failed

- name: cp post.h to target
  become: yes
  become_user: root
  become_method: sudo
  copy:
    src: '{{ spacemesh_post_source_dir }}/ffi/post.h'
    dest: '{{ spacemesh_source_dir }}/build'
    remote_src: yes
  when: go_spacemesh_version_detect.failed

- name: zip libpost-linux-v0.6.4.zip
  become: yes
  become_user: root
  become_method: sudo
  shell: 'cd {{ spacemesh_source_dir }};cp build/post.h .;cp build/libpost.so .;zip libpost-linux-v0.6.4.zip post.h libpost.so'
  when: go_spacemesh_version_detect.failed

- name: Run install target as root
  become: yes
  become_user: root
  become_method: sudo
  environment:
    PATH: "{{ go_bin_dir }}:{{ lookup('env', 'PATH') }}"
  make:
    chdir: '{{ spacemesh_source_dir }}'
    target: build
    params:
      ALL_PROXY: '{{ all_proxy }}'
  when: go_spacemesh_version_detect.failed

- name: Move go-spacemesh bin to target
  become: yes
  become_user: root
  become_method: sudo
  shell: 'cp {{ spacemesh_source_dir }}/build/go-spacemesh /usr/local/bin/go-spacemesh'
  when: go_spacemesh_version_detect.failed

- name: Move libpost.so to target
  become: yes
  become_user: root
  become_method: sudo
  shell: 'cp {{ spacemesh_source_dir }}/build/libpost.so /usr/lib/libpost.so'
  when: go_spacemesh_version_detect.failed

- name: Date for genesis time
  become: yes
  become_user: root
  become_method: sudo
  shell: 'echo `date -d "2 hour ago" +"%Y-%m-%d"T"%T"`'
  register: DATE
  when:
    - "'{{ coin_net }}' == 'test'"

- name: Copy spacemesh service file
  become: yes
  become_user: root
  become_method: sudo
  template:
    src: spacemesh-testnet.service.j2
    dest: /etc/systemd/system/spacemesh.service
    owner: spacemesh
    group: spacemesh
  when:
    - "'{{ coin_net }}' == 'test'"

- name: Remove tmp spacemesh
  become: yes
  become_user: root
  become_method: sudo
  ansible.builtin.file:
          path: '/tmp/spacemesh'
          state: absent
  when: "'{{ coin_net }}' == 'test'"

- name: Copy spacemesh config file
  become: yes
  template:
    src: spacemesh-config.mainnet.json.j2
    dest: '{{ chain_mountpoint }}/spacemesh/spacemesh-config.mainnet.json'
    owner: spacemesh
    group: spacemesh
  when:
    - "'{{ coin_net }}' == 'main'"

- name: Copy spacemesh service file
  become: yes
  become_user: root
  become_method: sudo
  template:
    src: spacemesh-mainnet.service.j2
    dest: /etc/systemd/system/spacemesh.service
    owner: spacemesh
    group: spacemesh
  when:
    - "'{{ coin_net }}' == 'main'"

- name: Start spacemesh service
  become: yes
  become_user: root
  become_method: sudo
  systemd:
    state: started
    daemon_reload: yes
    name: spacemesh
    enabled: yes

- name: Copy spacemesh logrotate file
  become: yes
  become_user: root
  become_method: sudo
  template:
    src: spacemesh-logrotate.conf.j2
    dest: /etc/logrotate.d/spacemesh
